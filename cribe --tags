[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex be7871d..21ff63a 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -28,7 +28,7 @@[m [mbin/[m
 ### Mac OS ###[m
 .DS_Store[m
 [m
[31m-[m
[32m+[m[32mjavaDocumentation/[m
 .idea/[m
 lib/[m
 images/[m
\ No newline at end of file[m
[1mdiff --git a/src/primitives/Double3.java b/src/primitives/Double3.java[m
[1mindex 2ecd07b..09e4a40 100644[m
[1m--- a/src/primitives/Double3.java[m
[1m+++ b/src/primitives/Double3.java[m
[36m@@ -45,6 +45,19 @@[m [mpublic class Double3 {[m
         this.d3 = value;[m
     }[m
 [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Copy constructor for Double3.[m
[32m+[m[32m     * Creates a new Double3 with the same values as the given Double3.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param other the Double3 to copy[m
[32m+[m[32m     */[m
[32m+[m[32m    public Double3(Double3 other) {[m
[32m+[m[32m        d1 = other.d1;[m
[32m+[m[32m        d2 = other.d2;[m
[32m+[m[32m        d3 = other.d3;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
     @Override[m
     public boolean equals(Object obj) {[m
         if (this == obj) return true;[m
[1mdiff --git a/src/primitives/Point.java b/src/primitives/Point.java[m
[1mindex 86fd3b2..9003393 100644[m
[1m--- a/src/primitives/Point.java[m
[1m+++ b/src/primitives/Point.java[m
[36m@@ -33,6 +33,16 @@[m [mpublic class Point {[m
         _xyz = xyz;[m
     }[m
 [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Copy constructor for Point.[m
[32m+[m[32m     * Creates a new Point with the same coordinates as the given Point.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param other the Point to copy[m
[32m+[m[32m     */[m
[32m+[m[32m    public Point(Point other) {[m
[32m+[m[32m        this._xyz = new Double3(other._xyz);[m
[32m+[m[32m    }[m
[32m+[m
     /**[m
      * Compares two points for equality.[m
      *[m
[1mdiff --git a/src/primitives/Vector.java b/src/primitives/Vector.java[m
[1mindex af0b5e2..bc0300e 100644[m
[1m--- a/src/primitives/Vector.java[m
[1m+++ b/src/primitives/Vector.java[m
[36m@@ -36,6 +36,20 @@[m [mpublic class Vector extends Point {[m
             throw new IllegalArgumentException("Vector Zero not allowable");[m
     }[m
 [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Copy constructor for Vector.[m
[32m+[m[32m     * Creates a new Vector with the same coordinates as the given Vector.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param other the Vector to copy[m
[32m+[m[32m     */[m
[32m+[m[32m    public Vector(Vector other) {[m
[32m+[m[32m        super(other._xyz);[m
[32m+[m[32m        if (other._xyz.equals(Double3.ZERO)) {[m
[32m+[m[32m            throw new IllegalArgumentException("Vector Zero not allowable");[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
     @Override[m
     public boolean equals(Object o) {[m
         if (this == o) return true;[m
[1mdiff --git a/src/renderer/Camera.java b/src/renderer/Camera.java[m
[1mindex 9d60767..5b4953f 100644[m
[1m--- a/src/renderer/Camera.java[m
[1m+++ b/src/renderer/Camera.java[m
[36m@@ -15,6 +15,7 @@[m [mimport static primitives.Util.isZero;[m
  */[m
 public class Camera implements Cloneable {[m
     private Point p0;[m
[32m+[m[32m    private Point VPCenter;[m
     private Vector vUp;[m
     private Vector vTo;[m
     private Vector vRight;[m
[36m@@ -73,7 +74,7 @@[m [mpublic class Camera implements Cloneable {[m
      * @return the constructed ray[m
      */[m
     public Ray constructRay(int nX, int nY, int j, int i) {[m
[31m-        Point pc = p0.add(vTo.scale(distance)); // Center point of the view plane[m
[32m+[m[32m        Point pc = this.VPCenter; // Center point of the view plane[m
         double Ry = height / nY; // Pixel height[m
         double Rx = width / nX; // Pixel width[m
 [m
[36m@@ -143,6 +144,18 @@[m [mpublic class Camera implements Cloneable {[m
         imageWriter.writeToImage();[m
     }[m
 [m
[32m+[m[32m    @Override[m
[32m+[m[32m    public Object clone() throws CloneNotSupportedException {[m
[32m+[m[32m        Camera cloned = (Camera) super.clone();[m
[32m+[m[32m        cloned.p0 = new Point(this.p0);[m
[32m+[m[32m        cloned.VPCenter = new Point(this.VPCenter);[m
[32m+[m[32m        cloned.vUp = new Vector(this.vUp);[m
[32m+[m[32m        cloned.vTo = new Vector(this.vTo);[m
[32m+[m[32m        cloned.vRight = new Vector(this.vRight);[m
[32m+[m[32m        return cloned;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
     /**[m
      * Inner static Builder class for constructing Camera objects.[m
      */[m
[36m@@ -306,6 +319,7 @@[m [mpublic class Camera implements Cloneable {[m
             }[m
 [m
             camera.vRight = camera.vTo.crossProduct(camera.vUp).normalize();[m
[32m+[m[32m            camera.VPCenter = camera.p0.add(camera.vTo.scale(camera.distance));[m
             try {[m
                 return (Camera) camera.clone();[m
             } catch (CloneNotSupportedException e) {[m
[1mdiff --git a/unitTests/geometries/PlaneTests.java b/unitTests/geometries/PlaneTests.java[m
[1mindex d864cff..a2d7640 100644[m
[1m--- a/unitTests/geometries/PlaneTests.java[m
[1m+++ b/unitTests/geometries/PlaneTests.java[m
[36m@@ -84,34 +84,47 @@[m [mpublic class PlaneTests {[m
 [m
         // ============ Equivalence Partitions Tests ==============[m
 [m
[31m-        // TC01: Ray's head is on the plane (0 points)[m
[31m-        assertNull(plane.findIntersections(new Ray(new Point(1, 0, 1), new Vector(1, 1, 1))),[m
[31m-                "Ray's head is on the plane");[m
[32m+[m[32m        // TC01: Ray intersects the plane (1 point)[m
[32m+[m[32m        Point p1 = new Point(0, 0, 2);[m
[32m+[m[32m        List<Point> result1 = plane.findIntersections(new Ray(new Point(0, -2, 0), new Vector(0, 1, 1)));[m
[32m+[m[32m        assertEquals(1, result1.size(), "Wrong number of points");[m
[32m+[m[32m        assertEquals(List.of(p1), result1, "Ray intersects the plane");[m
 [m
[31m-        // TC02: Ray's head is on the plane's reference point (0 points)[m
[31m-        assertNull(plane.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 1, 1))),[m
[31m-                "Ray's head is on the plane's reference point");[m
[32m+[m[32m        // TC02: Ray does not intersect the plane (0 points)[m
[32m+[m[32m        assertNull(plane.findIntersections(new Ray(new Point(2, -2, 0), new Vector(0, -1, 1))),[m
[32m+[m[32m                "Ray does not intersect the plane");[m
 [m
[31m-        // TC03: Ray's line is contained in the plane (0 points)[m
[31m-        assertNull(plane.findIntersections(new Ray(new Point(1, 0, 1), new Vector(2, 0, 1))),[m
[31m-                "Ray's line is contained in the plane");[m
 [m
[32m+[m[32m        // =============== Boundary Values Tests ==================[m
 [m
[31m-        // TC04: Ray's line is parallel to the plane (0 points)[m
[32m+[m[32m        // TC10: Ray is parallel to the plane and not included in the plane (0 points)[m
         assertNull(plane.findIntersections(new Ray(new Point(0, 1, 0), new Vector(1, 0, 0))),[m
[31m-                "Ray's line is parallel to the plane");[m
[32m+[m[32m                "Ray is parallel to the plane and not included in the plane");[m
[32m+[m
[32m+[m[32m        // TC11: Ray is parallel to the plane and included in the plane (0 points)[m
[32m+[m[32m        assertNull(plane.findIntersections(new Ray(new Point(0, 0, 0), new Vector(1, 0, 0))),[m
[32m+[m[32m                "Ray is parallel to the plane and included in the plane");[m
 [m
[31m-        // TC05: Ray crosses the plane (1 point)[m
[31m-        Point p = new Point(0, 0, 2);[m
[31m-        List<Point> result = plane.findIntersections(new Ray(new Point(0, -2, 0), new Vector(0, 1, 1)));[m
[31m-        assertEquals(1, result.size(), "Wrong number of points");[m
[31m-        assertEquals(List.of(p), result, "Ray crosses the plane");[m
[32m+[m[32m        // TC12: Ray is orthogonal to the plane and starts before the plane (1 point)[m
[32m+[m[32m        Point p3 = new Point(1, 0, 0);[m
[32m+[m[32m        List<Point> result3 = plane.findIntersections(new Ray(new Point(1, -1, 0), new Vector(0, 1, 0)));[m
[32m+[m[32m        assertEquals(1, result3.size(), "Wrong number of points");[m
[32m+[m[32m        assertEquals(List.of(p3), result3, "Ray is orthogonal to the plane and starts before the plane");[m
 [m
[31m-        // TC06: A ray crosses the plane and is perpendicular to it  (1 point)[m
[31m-        p = new Point(0, 0, 1);[m
[31m-        result = plane.findIntersections(new Ray(new Point(0, -2, 1), new Vector(0, 1, 0)));[m
[31m-        assertEquals(1, result.size(), "Wrong number of points");[m
[31m-        assertEquals(List.of(p), result, "Ray crosses the plane");[m
[32m+[m[32m        // TC13: Ray is orthogonal to the plane and starts in the plane (0 points)[m
[32m+[m[32m        assertNull(plane.findIntersections(new Ray(new Point(1, 0, 0), new Vector(0, 1, 0))),[m
[32m+[m[32m                "Ray is orthogonal to the plane and starts in the plane");[m
[32m+[m
[32m+[m[32m        // TC14: Ray is orthogonal to the plane and starts after the plane (0 points)[m
[32m+[m[32m        assertNull(plane.findIntersections(new Ray(new Point(1, 1, 0), new Vector(0, 1, 0))),[m
[32m+[m[32m                "Ray is orthogonal to the plane and starts after the plane");[m
[32m+[m
[32m+[m[32m        // TC15: Ray is neither orthogonal nor parallel to the plane and begins at the plane (P0 is in the plane but not the ray) (0 points)[m
[32m+[m[32m        assertNull(plane.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 1, 1))),[m
[32m+[m[32m                "Ray is neither orthogonal nor parallel to the plane and begins at the plane");[m
 [m
[32m+[m[32m        // TC16: Ray is neither orthogonal nor parallel to the plane and begins in the same point which appears as reference point in the plane (Q) (0 points)[m
[32m+[m[32m        assertNull(plane.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 0, 1))),[m
[32m+[m[32m                "Ray is neither orthogonal nor parallel to the plane and begins in the same point which appears as reference point in the plane (Q)");[m
     }[m
 }[m
